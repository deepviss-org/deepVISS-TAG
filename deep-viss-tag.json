{
  "openapi": "3.0.0",
  "info": {
    "description": "DeepVISS (Deep Vision Interoperability Specification Standard) allows several computer vision solutions to produce, consume and exchange events in the same format.",
    "version": "1.2.0",
    "title": "DeepVISS TAG",
    "termsOfService": "https://deepviss.org",
    "contact": {
      "email": "office@deepviss.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "dataset",
      "description": "Information about the datasets",
      "externalDocs": {
        "description": "Datasets API",
        "url": "https://deepviss.org"
      }
    },
    {
      "name": "avatar",
      "description": "Information about the avatars",
      "externalDocs": {
        "description": "Datasets API",
        "url": "https://deepviss.org"
      }
    },
    {
      "name": "price",
      "description": "Information about the pricing",
      "externalDocs": {
        "description": "Datasets API",
        "url": "https://deepviss.org"
      }
    }
  ],
  "paths": {
    "/dataset/list": {
      "get": {
        "tags": [
          "dataset"
        ],
        "summary": "Retrieve list of datasets",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetDatasetList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dataset"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/dataset/{datasetId}": {
      "get": {
        "tags": [
          "dataset"
        ],
        "summary": "Retrieve dataset info",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetDataset",
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUID"
            },
            "description": "The identifier of the dataset"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/dataset": {
      "post": {
        "tags": [
          "dataset"
        ],
        "summary": "create dataset",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "CreateDataset",
        "parameters": [
          {
            "in": "query",
            "name": "datasetName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "datasetType",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "staticImage",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "staticDataset",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Dataset",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "description": "file"
                    }
                  },
                  "coverImage": {
                    "type": "string",
                    "format": "binary",
                    "description": "cover image"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadDatasetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      },
      "delete": {
        "tags": [
          "dataset"
        ],
        "summary": "Delete dataset",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "DeleteDataset",
        "parameters": [],
        "requestBody": {
          "description": "The challenge object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/dataset/download/{datasetId}": {
      "get": {
        "tags": [
          "dataset"
        ],
        "summary": "download dataset",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "DownloadDataset",
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/dataset/media-item/{datasetId}": {
      "post": {
        "tags": [
          "dataset"
        ],
        "summary": "add media items to dataset",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "AddMediaItem",
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Dataset",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "description": "file"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadDatasetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/dataset/static-image/list": {
      "get": {
        "tags": [
          "dataset"
        ],
        "summary": "Retrieve list of static images",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetDatasetStaticImages",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/dataset/static-dataset/list": {
      "get": {
        "tags": [
          "dataset"
        ],
        "summary": "Retrieve list of static images",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetStaticDataset",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dataset"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/dataset/cost": {
      "get": {
        "tags": [
          "dataset"
        ],
        "summary": "get estimated cost for storage",
        "description": "optional parameter datasetId for new shards",
        "operationId": "getStorageCost",
        "parameters": [
          {
            "in": "query",
            "name": "datasetId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "size",
            "schema": {
              "description": "size of dataset in megabytes",
              "type": "number",
              "format": "double",
              "example": 3.14
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetStorageCost"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge": {
      "post": {
        "tags": [
          "challenge"
        ],
        "summary": "Create a new challenge.",
        "description": "",
        "operationId": "CreateChallenge",
        "parameters": [],
        "requestBody": {
          "description": "The challenge object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Challenge"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/broker/list": {
      "get": {
        "tags": [
          "challenge"
        ],
        "summary": "Retrieve list of challenges",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetChallengeListBroker",
        "parameters": [
          {
            "in": "query",
            "name": "evaluationId",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "dispatchId",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "challengeName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/ChallengeStatusEnum"
            }
          },
          {
            "in": "query",
            "name": "hasShredding",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "hasEyeTracking",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "hasBlackout",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderDirection",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Challenge"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/supervisor/list": {
      "get": {
        "tags": [
          "challenge"
        ],
        "summary": "Retrieve list of challenges",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetChallengeListSupervisor",
        "parameters": [
          {
            "in": "query",
            "name": "challengeName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "datasetId",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "evaluationId",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "dispatchId",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "accessType",
            "schema": {
              "$ref": "#/components/schemas/ChallengeAccessTypeEnum"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/ChallengeStatusEnum"
            }
          },
          {
            "in": "query",
            "name": "hasShredding",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "hasEyeTracking",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "hasBlackout",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderDirection",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Challenge"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/collaborator/list": {
      "get": {
        "tags": [
          "challenge"
        ],
        "summary": "Retrieve list of challenges",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetChallengeListCollaborator",
        "parameters": [
          {
            "in": "query",
            "name": "challengeName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accessType",
            "schema": {
              "$ref": "#/components/schemas/ChallengeAccessTypeEnum"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/ChallengeStatusEnum"
            }
          },
          {
            "in": "query",
            "name": "hasShredding",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "hasEyeTracking",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderDirection",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Challenge"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/{challengeId}": {
      "get": {
        "tags": [
          "challenge"
        ],
        "summary": "Retrieve list of challenges",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetChallenge",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the dataset"
          },
          {
            "in": "query",
            "name": "accessToken",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      },
      "patch": {
        "tags": [
          "challenge"
        ],
        "summary": "Update challenge.",
        "description": "",
        "operationId": "PatchChallenge",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the dataset"
          }
        ],
        "requestBody": {
          "description": "The new challenge object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchChallenge"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/PatchChallenge"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/{challengeId}/force-merge": {
      "get": {
        "tags": [
          "challenge"
        ],
        "summary": "force merge",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "ForceMergeTaggedMediaItem",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the dataset"
          },
          {
            "in": "query",
            "name": "challengeName",
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the tagged media item"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Challenge"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/{challengeId}/download/{shard}": {
      "get": {
        "tags": [
          "challenge"
        ],
        "summary": "Download tagged items from challenges",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "DownloadChallenge",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the challenge"
          },
          {
            "in": "path",
            "name": "shard",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The identifier of the shard"
          },
          {
            "in": "query",
            "name": "X-Auth-Credential",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/{challengeId}/archive/{shard}": {
      "get": {
        "tags": [
          "challenge"
        ],
        "summary": "Archive shard from challenges",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "ArchiveShard",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the challenge"
          },
          {
            "in": "path",
            "name": "shard",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The identifier of the shard"
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchivedShard"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/{challengeId}/archive/list": {
      "get": {
        "tags": [
          "challenge"
        ],
        "summary": "Get archive list from challenges",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "ArchivedShardList",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the challenge"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArchivedShard"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/{challengeId}/tagged-item/list": {
      "get": {
        "tags": [
          "challenge"
        ],
        "summary": "Retrieve list tagged media items",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetTaggedItems",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the dataset"
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "stage",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "accessToken",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TaggedMediaItem"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/{challengeId}/star": {
      "post": {
        "tags": [
          "challenge"
        ],
        "summary": "Star a public challenge.",
        "description": "",
        "operationId": "StarChallenge",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/{challengeId}/assign-tenant/{tenantId}": {
      "post": {
        "tags": [
          "challenge"
        ],
        "summary": "Star a public challenge.",
        "description": "",
        "operationId": "AssignTenantToChallenge",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tenantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/{challengeId}/reject": {
      "post": {
        "tags": [
          "challenge"
        ],
        "summary": "Star a public challenge.",
        "description": "",
        "operationId": "RejectChallenge",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The challenge object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/{challengeId}/statistics": {
      "get": {
        "tags": [
          "challenge"
        ],
        "summary": "Get challenge statistics",
        "description": "",
        "operationId": "StatisticsChallenge",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeStatistics"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeStatistics"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/cost": {
      "post": {
        "tags": [
          "challenge"
        ],
        "summary": "get estimated cost for challenge",
        "description": "estimage challenge budget",
        "operationId": "getChallengeCost",
        "parameters": [],
        "requestBody": {
          "description": "The challenge options",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeBudgetRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/ChallengeBudgetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeBudgetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/assign-users": {
      "post": {
        "tags": [
          "challenge"
        ],
        "summary": "Assign a private challenge.",
        "description": "",
        "operationId": "AssignUsers",
        "parameters": [],
        "requestBody": {
          "description": "The users to be assigned to a challenge",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignUsersRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AssignUsersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/assign-challenges": {
      "post": {
        "tags": [
          "challenge"
        ],
        "summary": "Assign private challenges.",
        "description": "",
        "operationId": "AssignChallenges",
        "parameters": [],
        "requestBody": {
          "description": "The challenges to be assigned to a user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignChallengesRequest"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/AssignChallengesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/upload": {
      "post": {
        "tags": [
          "challenge"
        ],
        "summary": "upload a private challenge.",
        "description": "",
        "operationId": "UploadChallenge",
        "parameters": [
          {
            "in": "query",
            "name": "datasetName",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "datasetType",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challengeAccessType",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "challengeTagType",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Dataset",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "description": "file"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/challenge/tagged-media-item/save": {
      "post": {
        "tags": [
          "challenge"
        ],
        "summary": "Save tagged media item",
        "description": "Save tagged media item for audio files",
        "operationId": "saveTaggedMediaItem",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaggedMediaItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/task/{challengeId}": {
      "get": {
        "tags": [
          "task"
        ],
        "summary": "Get new task",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetTask",
        "parameters": [
          {
            "in": "path",
            "name": "challengeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the challenge"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/task/{taskId}/submit": {
      "post": {
        "tags": [
          "task"
        ],
        "summary": "Submit  task",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "SubmitTask",
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the challenge"
          }
        ],
        "requestBody": {
          "description": "task object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/task/discovery/{datasetId}": {
      "get": {
        "tags": [
          "task"
        ],
        "summary": "Get new task",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetDiscoveryTask",
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the dataset"
          },
          {
            "in": "query",
            "name": "tagType",
            "schema": {
              "type": "ShapeTypeEnum",
              "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/ShapeTypeEnum"
            },
            "description": "The identifier of the tag type"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/task/discovery/submit/{mediaItemId}": {
      "post": {
        "tags": [
          "task"
        ],
        "summary": "Submit  task",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "SubmitDiscoveryTask",
        "parameters": [
          {
            "in": "path",
            "name": "mediaItemId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The identifier of the challenge"
          }
        ],
        "requestBody": {
          "description": "task object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/dispatch-policy/list": {
      "get": {
        "tags": [
          "dispatchPolicy"
        ],
        "summary": "Retrieve list of dispatch policies",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetDispatchPolicyList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DispatchPolicy"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/dispatch-policy": {
      "post": {
        "tags": [
          "dispatchPolicy"
        ],
        "summary": "Create a new dispatchPolicy.",
        "description": "",
        "operationId": "CreateDispatchPolicy",
        "parameters": [],
        "requestBody": {
          "description": "The dispatchPolicy object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DispatchPolicy"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/DispatchPolicy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DispatchPolicy"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      },
      "put": {
        "tags": [
          "dispatchPolicy"
        ],
        "summary": "Update dispatchPolicy.",
        "description": "",
        "operationId": "UpdateDispatchPolicy",
        "parameters": [],
        "requestBody": {
          "description": "The dispatchPolicy object to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DispatchPolicy"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/DispatchPolicy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DispatchPolicy"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/evaluation-policy/list": {
      "get": {
        "tags": [
          "evaluationPolicy"
        ],
        "summary": "Retrieve list of evaluation policies",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetEvaluationPolicyList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvaluationPolicy"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/evaluation-policy": {
      "post": {
        "tags": [
          "evaluationPolicy"
        ],
        "summary": "Create a new evaluationPolicy.",
        "description": "",
        "operationId": "CreateEvaluationPolicy",
        "parameters": [],
        "requestBody": {
          "description": "The evaluationPolicy object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationPolicy"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationPolicy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationPolicy"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      },
      "put": {
        "tags": [
          "evaluationPolicy"
        ],
        "summary": "update evaluationPolicy.",
        "description": "",
        "operationId": "UpdateEvaluationPolicy",
        "parameters": [],
        "requestBody": {
          "description": "The evaluationPolicy object to be updated",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationPolicy"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/EvaluationPolicy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationPolicy"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/media-item": {
      "delete": {
        "tags": [
          "mediaItem"
        ],
        "summary": "Delete mediaItem",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "DeleteMediaItems",
        "parameters": [],
        "requestBody": {
          "description": "The challenge object to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/media-item/{bucketName}/{mediaItem}": {
      "get": {
        "tags": [
          "mediaItem"
        ],
        "summary": "Retrieve media item",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetMediaItem",
        "parameters": [
          {
            "in": "path",
            "name": "bucketName",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "bucket name"
          },
          {
            "in": "path",
            "name": "mediaItem",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "media item"
          },
          {
            "in": "query",
            "name": "taskId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "shred id"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/media-item/text/{documentId}/{pageId}": {
      "get": {
        "tags": [
          "mediaItem"
        ],
        "summary": "Retrieve media item",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetTextMediaItem",
        "parameters": [
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "documentId"
          },
          {
            "in": "path",
            "name": "pageId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "pageId"
          },
          {
            "in": "query",
            "name": "taskId",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "shred id"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/media-item/{datasetId}/list": {
      "get": {
        "tags": [
          "mediaItem"
        ],
        "summary": "Retrieve list of mediaItems",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "GetMediaItemList",
        "parameters": [
          {
            "in": "path",
            "name": "datasetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MediaItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/avatar/createAvatar": {
      "get": {
        "tags": [
          "avatar"
        ],
        "summary": "Create avatar",
        "description": "",
        "operationId": "CreateAvatar",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Avatar"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/avatar/badge/list": {
      "get": {
        "tags": [
          "avatar"
        ],
        "summary": "Get Badge",
        "description": "",
        "operationId": "GetBadge",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Badge"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/avatar": {
      "get": {
        "tags": [
          "avatar"
        ],
        "summary": "Get avatar",
        "description": "",
        "operationId": "GetAvatar",
        "parameters": [
          {
            "in": "query",
            "name": "avatarId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Avatar"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/price/checkNumberOfUsers": {
      "get": {
        "tags": [
          "price"
        ],
        "summary": "Check number of users",
        "description": "",
        "operationId": "checkNumberOfUsers",
        "parameters": [
          {
            "in": "query",
            "name": "pricePlan",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "numberOfCollaborators",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Avatar": {
        "type": "object",
        "properties": {
          "avatarId": {
            "type": "string",
            "format": "uuid",
            "description": "[TBD] Alpha-numeric, unique id of avatar",
            "example": "UTWKE80768EF05389899TDD196397EDFDDFBC81751818B7FD13001IU455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "lifeForm": {
            "type": "LifeFormEnum",
            "$ref": "#/components/schemas/LifeFormEnum"
          },
          "assignedChallenges": {
            "description": "assignedChallenges",
            "type": "array",
            "items": {
              "type": "Challenge",
              "$ref": "#/components/schemas/Challenge"
            }
          }
        }
      },
      "Badge": {
        "type": "object",
        "properties": {
          "badgeId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "icon": {
            "type": "integer"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "LifeFormEnum": {
        "type": "string",
        "enum": [
          "silicon",
          "carbon"
        ]
      },
      "Dataset": {
        "type": "object",
        "properties": {
          "datasetId": {
            "type": "string",
            "format": "uuid",
            "description": "[TBD] Alpha-numeric, unique id of dataset",
            "example": "XAFKE80768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "type": {
            "$ref": "#/components/schemas/DatasetTypeEnum"
          },
          "creationTimestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "lastUpdateTimestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "owningAccountId": {
            "type": "string",
            "format": "uuid",
            "description": "[TBD] Alpha-numeric, unique id of dataset",
            "example": "UWRBFUWRW18B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0EUWEBFWUBEFWUE"
          },
          "name": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, name of dataset",
            "example": "Dogs"
          },
          "image": {
            "type": "Images",
            "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Image",
            "description": "Alpa-numeric, unique id of media item path. ",
            "example": "7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "storageCost": {
            "description": "cost for storage in dollars per month",
            "type": "number",
            "format": "double",
            "example": 3.14
          },
          "size": {
            "description": "size of the dataset",
            "type": "number",
            "format": "double",
            "example": 3.14
          },
          "numberOfShards": {
            "description": "number of shards in dataset",
            "type": "integer",
            "example": 3
          },
          "numberOfMediaItems": {
            "description": "media items in that dataset",
            "type": "integer",
            "example": 314
          },
          "hasBrokenItems": {
            "type": "boolean",
            "description": "hasBrokenItems",
            "example": "true"
          }
        }
      },
      "DatasetStorageCost": {
        "type": "object",
        "properties": {
          "datasetId": {
            "type": "string",
            "format": "uuid",
            "description": "[TBD] Alpha-numeric, unique id of dataset",
            "example": "XAFKE80768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "type": {
            "$ref": "#/components/schemas/DatasetTypeEnum"
          },
          "estimatedShardCost": {
            "description": "cost for storage in dollars per month",
            "type": "number",
            "format": "double",
            "example": 3.14
          },
          "totalCost": {
            "description": "cost for storage in dollars per month",
            "type": "number",
            "format": "double",
            "example": 3.14
          }
        }
      },
      "UploadDatasetResponse": {
        "type": "object",
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/Dataset"
          },
          "shard": {
            "description": "shard number",
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "uploadedSize": {
            "description": "size of the dataset",
            "type": "number",
            "format": "double",
            "example": 3.14
          },
          "uploadedNumberOfMediaItems": {
            "description": "number of datasets that were uploaded",
            "type": "integer",
            "example": 3.14
          },
          "brokenMediaItems": {
            "description": "Media items that are broken but still saved",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "failedMediaItems": {
            "description": "Media items could not be saved",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uploadedMediaItemList": {
            "description": "Media items ids that have been uploaded",
            "type": "array",
            "items": {
              "type": "string",
              "format": "UUID"
            }
          }
        }
      },
      "Challenge": {
        "type": "object",
        "required": [
          "accessType"
        ],
        "properties": {
          "challengeId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of challenge. ",
            "example": "DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "datasetId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of dataset",
            "example": "DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "evaluationPolicyId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of evaluation policy",
            "example": "DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "dispatchPolicyId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of dispatch policy",
            "example": "DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "creationTimestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "status": {
            "type": "ChallengeStatusEnum",
            "$ref": "#/components/schemas/ChallengeStatusEnum"
          },
          "accessType": {
            "type": "ChallengeAccessTypeEnum",
            "$ref": "#/components/schemas/ChallengeAccessTypeEnum"
          },
          "tenantRole": {
            "type": "ChallengeTenantRoleEnum",
            "$ref": "#/components/schemas/ChallengeTenantRoleEnum"
          },
          "name": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, name of dataset",
            "example": "Dogs"
          },
          "completionPercentage": {
            "type": "integer",
            "description": "completion percentage of a challenge",
            "example": "70"
          },
          "completionPercentageForCollaborator": {
            "type": "integer",
            "description": "completion percentage of a challenge for a collaborator",
            "example": "70"
          },
          "description": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, name of dataset",
            "example": "Tag the cats"
          },
          "budget": {
            "description": "budget allocated for challenge",
            "type": "number",
            "format": "double",
            "example": 3.14
          },
          "stared": {
            "type": "boolean",
            "description": "[TBD] Alpha-numeric, name of dataset",
            "example": "true"
          },
          "supplierTenantId": {
            "type": "string",
            "format": "uuid",
            "description": "[TBD] Alpha-numeric, name of supplierTenantId",
            "example": "Dogs"
          },
          "resolution": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, name of dataset",
            "example": "Tag the cats"
          },
          "demanderTenantId": {
            "type": "string",
            "format": "uuid",
            "description": "[TBD] Alpha-numeric, name of demanderTenantId",
            "example": "Dogs"
          },
          "initialNumberOfShards": {
            "type": "integer",
            "description": "shards in dataset",
            "example": "4"
          },
          "datasetMetadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "[TBD] Alpha-numeric, name of dataset",
                "example": "Dogs"
              },
              "mediaItems": {
                "type": "integer",
                "description": "estimated Tags Per Media Item",
                "example": "1000"
              },
              "numberOfShards": {
                "type": "integer",
                "description": "shards in dataset",
                "example": "4"
              },
              "coverImage": {
                "type": "Images",
                "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Image"
              }
            }
          },
          "tagType": {
            "type": "ShapeTypeEnum",
            "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/ShapeTypeEnum"
          },
          "estimatedTagsPerMediaItem": {
            "type": "number",
            "format": "double",
            "description": "estimated Tags Per Media Item",
            "example": 3.14
          },
          "nodeTaxonomy": {
            "type": "array",
            "description": "taxonomy list for nodeType",
            "items": {
              "type": "string"
            },
            "example": "consumer,overdue"
          },
          "edgeTaxonomy": {
            "type": "array",
            "description": "taxonomy list for edgeType",
            "items": {
              "type": "string"
            },
            "example": "is a, has a"
          },
          "completionPercentages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChallengeCompletionPercentage",
              "type": "ChallengeCompletionPercentage"
            }
          },
          "expiration": {
            "type": "integer",
            "description": "hours until the challenge is expired",
            "example": "4"
          },
          "challengeAccessToken": {
            "type": "string",
            "description": "Token for accessing the challenge",
            "example": "DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "averageTimeSpentPerMediaItem": {
            "type": "integer",
            "description": "average time in seconds to complete a media item",
            "example": "40"
          },
          "averageNumberOfActionsPerMediaItem": {
            "type": "integer",
            "description": "averege number of actions required to complete a media item",
            "example": "40"
          },
          "hasEyeTracking": {
            "type": "boolean",
            "description": "checkbox for eye tracking feature",
            "example": "true"
          },
          "hasShredding": {
            "type": "boolean",
            "description": "checkbox for shredding feature",
            "example": "true"
          },
          "hasBlackout": {
            "type": "boolean",
            "description": "checkbox for blackout feature",
            "example": "true"
          },
          "taskTimeout": {
            "type": "integer",
            "description": "seconds until the task is expired",
            "example": "40"
          },
          "numberOfTaggedMediaItems": {
            "type": "integer",
            "description": "numberOfTaggedMediaItems",
            "example": "40"
          },
          "numberOfMergedTags": {
            "type": "integer",
            "description": "numberOfMergedTags",
            "example": "40"
          }
        }
      },
      "PatchChallenge": {
        "type": "object",
        "properties": {
          "evaluationPolicyId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of evaluation policy",
            "example": "DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "dispatchPolicyId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of dispatch policy",
            "example": "DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "accessType": {
            "type": "ChallengeAccessTypeEnum",
            "$ref": "#/components/schemas/ChallengeAccessTypeEnum"
          },
          "name": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, name of dataset",
            "example": "Dogs"
          },
          "description": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, name of dataset",
            "example": "Tag the cats"
          },
          "budget": {
            "description": "budget allocated for challenge",
            "type": "number",
            "format": "double",
            "example": 3.14
          },
          "nodeTaxonomy": {
            "type": "array",
            "description": "taxonomy list for nodeType",
            "items": {
              "type": "string"
            },
            "example": "consumer,overdue"
          },
          "edgeTaxonomy": {
            "type": "array",
            "description": "taxonomy list for edgeType",
            "items": {
              "type": "string"
            },
            "example": "is a, has a"
          }
        }
      },
      "ChallengeAccessTypeEnum": {
        "type": "string",
        "enum": [
          "public",
          "private",
          "spot",
          "unlisted"
        ]
      },
      "ChallengeStatusEnum": {
        "type": "string",
        "enum": [
          "pending",
          "inProgress",
          "completed",
          "rejected"
        ]
      },
      "ChallengeTenantRoleEnum": {
        "type": "string",
        "enum": [
          "SUPPLIER",
          "BROKER",
          "DEMANDER"
        ]
      },
      "ChallengeBudgetRequest": {
        "type": "object",
        "properties": {
          "datasetId": {
            "type": "string",
            "format": "uuid",
            "description": "[TBD] Alpha-numeric, unique id of dataset",
            "example": "XAFKE80768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "evaluationPolicyId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of evaluation policy",
            "example": "DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "dispatchPolicyId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of dispatch policy",
            "example": "DFK768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "tagType": {
            "type": "ShapeTypeEnum",
            "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/ShapeTypeEnum"
          },
          "estimatedTagsPerMediaItem": {
            "type": "number",
            "format": "double",
            "description": "estimated Tags Per Media Item",
            "example": 3.14
          },
          "averageTimeSpentPerMediaItem": {
            "type": "integer",
            "description": "average time in seconds to complete a media item",
            "example": "40"
          },
          "averageNumberOfActionsPerMediaItem": {
            "type": "integer",
            "description": "averege number of actions required to complete a media item",
            "example": "40"
          },
          "hasEyeTracking": {
            "type": "boolean",
            "description": "checkbox for eye tracking feature",
            "example": "true"
          },
          "hasShredding": {
            "type": "boolean",
            "description": "checkbox for shredding feature",
            "example": "true"
          }
        }
      },
      "ChallengeBudgetResponse": {
        "type": "object",
        "properties": {
          "estimatedBudget": {
            "type": "number",
            "format": "double",
            "description": "estimated budget for challenge",
            "example": 3.14
          }
        }
      },
      "ChallengeStage": {
        "type": "object",
        "properties": {
          "stageNumber": {
            "description": "stage number",
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "percentage": {
            "description": "completion percentage for this stage",
            "type": "integer",
            "format": "int32",
            "example": 100
          },
          "pendingTasksPercentage": {
            "description": "completion percentage for this stage",
            "type": "integer",
            "format": "int32",
            "example": 100
          },
          "failedTasksPercentage": {
            "description": "completion percentage for this stage",
            "type": "integer",
            "format": "int32",
            "example": 100
          },
          "reportedTasksPercentage": {
            "description": "completion percentage for this stage",
            "type": "integer",
            "format": "int32",
            "example": 100
          },
          "operator": {
            "type": "LifeFormEnum",
            "$ref": "#/components/schemas/LifeFormEnum"
          }
        }
      },
      "ChallengeCompletionPercentage": {
        "type": "object",
        "properties": {
          "shard": {
            "description": "shard number",
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "stages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChallengeStage",
              "type": "ChallengeStage"
            }
          }
        }
      },
      "MediaDescriptor": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "Size of files when represented in binary, without additional encoding. Used for de-duplication.",
            "example": 1345789
          },
          "hash": {
            "type": "string",
            "description": "Cryptographic hash of original file. Used for de-duplication.",
            "example": "FGX8993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "pHash": {
            "type": "string",
            "description": "Perceptual representation of the content of the media. Used for de-duplication.",
            "example": "pre"
          }
        }
      },
      "MediaItem": {
        "type": "object",
        "properties": {
          "mediaItemId": {
            "type": "string",
            "format": "uuid",
            "description": "[TBD] Alpha-numeric, unique id of media item",
            "example": "UERE80768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "type": {
            "type": "string",
            "enum": [
              "rgb-static-photo",
              "rgb-live-photo",
              "rgb-video",
              "audio-rgb-video",
              "audio-only",
              "text"
            ]
          },
          "format": {
            "type": "string",
            "enum": [
              "image/heif",
              "image/heic",
              "image/heif-sequence",
              "image/jpeg",
              "image/png",
              "image/webp",
              "image/x-portable-pixmap",
              "image/x-icon",
              "image/bmp",
              "image/tiff",
              "image/svg+xml",
              "video/mp4",
              "video/3gpp",
              "video/quicktime",
              "video/x-msvideo",
              "video/x-ms-wmv",
              "text",
              "audio/wav"
            ]
          },
          "descriptor": {
            "type": "MediaDescriptor",
            "$ref": "#/components/schemas/MediaDescriptor",
            "description": "Information about the evaluation of the accuracy of this tag."
          },
          "sharding": {
            "type": "shardingDescriptor",
            "$ref": "#/components/schemas/ShardingDescriptor",
            "description": "Information about the shardId, the block id and the sharding policy this media items should conform to."
          },
          "image": {
            "type": "Images",
            "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Image",
            "description": "Alpa-numeric, unique id of media item path. ",
            "example": "7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "path": {
            "type": "string",
            "description": "path to the media item",
            "example": "bucket/photo.jpg"
          },
          "broken": {
            "type": "boolean",
            "description": "broken",
            "example": "true"
          },
          "processedMediaItems": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Path to the processed mediaItem",
              "example": "/dataset/photo.jpg"
            }
          }
        }
      },
      "ChallengeStatistics": {
        "type": "object",
        "properties": {
          "averageRate": {
            "description": "average payment per challenge",
            "type": "number",
            "format": "double",
            "example": 3.14
          },
          "averageCompletionTime": {
            "description": "Average time to complete a task for a challenge",
            "type": "number",
            "format": "double",
            "example": 3
          },
          "averageValidationRate": {
            "description": "Average valdation per challenge",
            "type": "number",
            "format": "double",
            "example": 3.14
          },
          "paymentPerHour": {
            "description": "Estimated payment per hour",
            "type": "number",
            "format": "double",
            "example": 3.14
          },
          "completionTimePassed": {
            "description": "completion time for all the task passed miliseconds",
            "type": "integer",
            "format": "int64",
            "example": 32312342
          },
          "completionTimeReal": {
            "description": "completion time for all the tasks miliseconds",
            "type": "integer",
            "format": "int64",
            "example": 3234234
          },
          "usersWorkTime": {
            "description": "graphs",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "description": " avatar id",
                  "type": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ShardingDescriptor": {
        "type": "object",
        "description": "The confidence of a merged tag (from several tags) or the overall.",
        "properties": {
          "block": {
            "description": "TBD",
            "type": "integer",
            "format": "int32"
          },
          "shard": {
            "description": "TBD",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Evaluation": {
        "type": "object",
        "description": "The confidence of a merged tag (from several tags) or the overall.",
        "properties": {
          "confidence": {
            "description": "The confidence of the merged tag (from several tags), based on IoU (Intersection over Union) of the composing tags. The confidence is the reduce form of the SubjectiveOpinion, representing only its belief part.",
            "type": "number",
            "format": "double",
            "example": 0.14
          },
          "subjectiveOpinion": {
            "description": "The normalized form of InternalSubjectiveOpinion. Confidence represented the belief components of this object.",
            "type": "SubjectiveOpinion",
            "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/SubjectiveOpinion"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "format": "UUID",
            "description": "Alpha-numeric, unique id of user who has performed the task",
            "example": "7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "avatarId": {
            "type": "string",
            "format": "UUID",
            "description": "Alpha-numeric, unique id of user who has performed the task.",
            "example": "7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "challengeId": {
            "type": "string",
            "format": "UUID",
            "description": "Alpa-numeric, unique id of challenge. ",
            "example": "7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "attemptSequenceNumber": {
            "type": "integer",
            "format": "int32",
            "description": "Identifies the number of evaluation attempts performed on this specific media item.",
            "example": 2
          },
          "generationTimestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00) when the task was requested by the user"
          },
          "submissionTimestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00) when the task was submitted by the user"
          },
          "evaluationStatus": {
            "type": "string",
            "enum": [
              "unallocated",
              "leased",
              "not-evaluated",
              "passed",
              "failed",
              "skipped",
              "timed-out",
              "permamnently-failed",
              "shredded-task",
              "merged-task"
            ]
          },
          "challengeName": {
            "type": "string",
            "description": "Name of Challenge",
            "example": "Tag Cats"
          },
          "challengeDescription": {
            "type": "string",
            "description": "[TBD] Alpha-numeric, name of dataset",
            "example": "Tag the cats"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag",
              "type": "Tag"
            }
          },
          "edges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Edge",
              "type": "Edge"
            }
          },
          "resolution": {
            "$ref": "#/components/schemas/TaskResolution"
          },
          "shred": {
            "$ref": "#/components/schemas/Shred"
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "tagId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of tagged object",
            "example": "B07E91CB289F87791D78064ECC93754F19B13D419489F162"
          },
          "submissionTimestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "nodeType": {
            "type": "string",
            "description": "What does the object that has been detected represent. Can be extended to discrete histogram of types.",
            "example": "vehicle"
          },
          "attributes": {
            "description": "Atributes of a tag",
            "type": "array",
            "items": {
              "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Attribute",
              "type": "Attribute"
            }
          },
          "geometry": {
            "description": "What are the shapes that compose the tag?",
            "type": "array",
            "items": {
              "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Shape",
              "type": "Shape"
            }
          },
          "taskId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of task object",
            "example": "1CB289F87791D78064ECC93754F19B13D419489F162A"
          },
          "internalSubjectiveOpinion": {
            "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/InternalSubjectiveOpinion",
            "type": "InternalSubjectiveOpinion"
          }
        }
      },
      "MergedTag": {
        "type": "object",
        "properties": {
          "mergedTagId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of tagged object",
            "example": "7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "mediaItemId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of tagged object",
            "example": "7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "challengeId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of tagged object",
            "example": "7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "permanentIdentifier": {
            "type": "PermanentIdentifier",
            "$ref": "#/components/schemas/PermanentIdentifier",
            "description": "Identifier (key) composed of several composable elements (sub-keys). Uniqueness is enforced on all segments, in their respective order."
          },
          "nodeType": {
            "type": "string",
            "description": "What type of object/event has been detected?",
            "example": "vehicle"
          },
          "attributes": {
            "description": "Atributes of a tag",
            "type": "array",
            "items": {
              "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Attribute",
              "type": "Attribute"
            }
          },
          "geometry": {
            "description": "What are the shapes that have been merged to determine this tag?",
            "type": "array",
            "items": {
              "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Shape",
              "type": "Shape"
            }
          },
          "evaluation": {
            "type": "Evaluation",
            "$ref": "#/components/schemas/Evaluation",
            "description": "Information about the evaluation of the accuracy of this tag."
          },
          "composingTags": {
            "description": "What are the tags which have been merged?",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "evaluationStatus": {
            "type": "string",
            "enum": [
              "passed",
              "failed",
              "incomplete"
            ]
          }
        }
      },
      "PermanentIdentifier": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/PermanentIdentifier"
      },
      "TaggedMediaItem": {
        "type": "object",
        "properties": {
          "taggedMediaItemId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of tagged object",
            "example": "7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "mediaItem": {
            "type": "MediaItem",
            "$ref": "#/components/schemas/MediaItem",
            "description": "MediaItem tagged"
          },
          "descriptor": {
            "type": "MediaDescriptor",
            "$ref": "#/components/schemas/MediaDescriptor",
            "description": "Information about the evaluation of the accuracy of this tag."
          },
          "challengeId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of tagged object",
            "example": "7E43358680768EF053898993DD196397EDFDDFBC81751818B7FD1300124455B07E91CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "composingTasks": {
            "description": "What are the tasks contributed in the determination of these tags?",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mergedTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MergedTag",
              "type": "MergedTag"
            }
          },
          "mergedEdges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Edge",
              "type": "Edge"
            }
          },
          "stage": {
            "type": "integer",
            "description": "tagged media item stage",
            "example": "2"
          },
          "creationTimestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00) when the task was submitted by the user"
          }
        }
      },
      "EvaluationPolicy": {
        "type": "object",
        "description": "The parameters used in the evaluation of a challenge, its tasks and their Tags.",
        "properties": {
          "evaluationPolicyId": {
            "description": "Unique ID of evaluation policy",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "name",
            "type": "string",
            "example": "Lightwight"
          },
          "spatialOverlapThreshold": {
            "description": "The minimum amount of overlap between two tags, which, in conjuction with a matching object-type, is a condition for merging two tags",
            "type": "number",
            "format": "double",
            "example": 0.5
          },
          "harshness": {
            "description": "The penalty incurred for a tag that is NOT matched with other tags",
            "type": "number",
            "format": "double",
            "example": 0.5
          },
          "rankOfMean": {
            "description": "The rank (power) of the generalized mean used for evaluating a task composed of several tags. Negative values mean harsher evaluations, values larger than 1.0 mean less harsh evaluations. Default value is 1.0 (arithmetic mean). ",
            "type": "number",
            "format": "double",
            "example": 1.0
          },
          "summationType": {
            "description": "If set to 'algebraic', negative results on one task will be substracted from user payout.",
            "type": "string",
            "enum": [
              "algebraic",
              "non-negative"
            ]
          },
          "description": {
            "type": "string",
            "description": "EvaluationPolicy description",
            "example": "Tags must overlap at least 30%"
          }
        }
      },
      "DispatchPolicy": {
        "type": "object",
        "description": "The parameters used in the disaptch of a task",
        "properties": {
          "dispatchPolicyId": {
            "description": "Unique ID of dispatch policy",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "name",
            "type": "string",
            "example": "Fast"
          },
          "numberOfUsers": {
            "description": "Number of users that are assigned the same task",
            "type": "integer",
            "example": 3
          },
          "mediaItemLockTimeout": {
            "description": "Time to wait before assign the same mediaItem to other user",
            "type": "integer",
            "example": 10
          },
          "description": {
            "type": "string",
            "description": "DispatchPolicy description",
            "example": "Three users need to tag a task in order to be validated"
          }
        }
      },
      "DatasetTypeEnum": {
        "type": "string",
        "enum": [
          "rgb-static-photo",
          "rgb-live-photo",
          "rgb-video",
          "audio-rgb-video",
          "audio-only",
          "text",
          ""
        ]
      },
      "TaskResolution": {
        "type": "object",
        "description": "Information about a task",
        "properties": {
          "description": {
            "type": "string",
            "description": "description",
            "example": "Reported for ..."
          }
        }
      },
      "Point2D": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Point2D"
      },
      "Point3D": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Point3D"
      },
      "Shape2DPoint": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Shape2DPoint"
      },
      "Shape2DRectangle": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Shape2DRectangle"
      },
      "Shape2DPolygon": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Shape2DPolygon"
      },
      "Shape2DTimeboundPolygon": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Shape2DTimeboundPolygon"
      },
      "Shape2DRectangleTextBlock": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Shape2DRectangleTextBlock"
      },
      "Shape2DPolygonTextBlock": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Shape2DPolygonTextBlock"
      },
      "Shape2DPlainText": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Shape2DPlainText"
      },
      "Shape2DAudio": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Shape2DAudio"
      },
      "BoundingRectangle": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/BoundingRectangle"
      },
      "Style": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Style"
      },
      "Transliteration": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/Transliteration"
      },
      "SubjectiveOpinion": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/SubjectiveOpinion"
      },
      "InternalSubjectiveOpinion": {
        "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/InternalSubjectiveOpinion"
      },
      "AssignUsersRequest": {
        "type": "object",
        "description": "assign users dto",
        "properties": {
          "challengeId": {
            "description": "Unique ID of challenge",
            "type": "string",
            "format": "uuid"
          },
          "avatarIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AssignChallengesRequest": {
        "type": "object",
        "description": "assign users dto",
        "properties": {
          "avatarId": {
            "description": "Unique ID of avatar",
            "type": "string",
            "format": "uuid"
          },
          "challengeIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ArchivedShard": {
        "type": "object",
        "properties": {
          "challengeId": {
            "type": "string",
            "format": "uuid",
            "description": "Alpha-numeric, unique id of challenge. ",
            "example": "1CB289F87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "shard": {
            "description": "TBD",
            "type": "integer",
            "format": "int32"
          },
          "archiveName": {
            "type": "string",
            "description": "name of the archived shard",
            "example": "challenge"
          },
          "creationTimestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "lastUpdateTimestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time expressed according to ISO 8601 (e.g. 2018-06-24T23:10:28+03:00)"
          },
          "archiveCompletionPercentage": {
            "type": "number",
            "format": "double",
            "description": "completion percentage of a challenge",
            "example": 30.14
          },
          "currentCompletionPercentage": {
            "type": "number",
            "format": "double",
            "description": "completion percentage of a challenge",
            "example": 30.14
          }
        }
      },
      "Edge": {
        "type": "object",
        "properties": {
          "edgeId": {
            "type": "string",
            "format": "uuid",
            "description": "unique id of edge object",
            "example": "33d6c32b-3e53-42bb-804a-10553102cff9"
          },
          "sourceTagId": {
            "type": "string",
            "description": "Need to find solution for unifying tag id's across taggers-collaborators.Alpha-numeric, unique id of tagged object",
            "example": "87791D78064ECC93754F19B13D419489F162A150A22DD814CKAF0E"
          },
          "destinationTagID": {
            "type": "string",
            "description": "Need to find solution for unifying tag id's across taggers-collaborators. Alpha-numeric, unique id of tagged object",
            "example": "7300124455B07E91CB289F87791D78064ECC93754F19B13D419489F1"
          },
          "sourceTextBoxId": {
            "type": "string",
            "description": "textBox id from inside sourceTag",
            "example": "1"
          },
          "destinationTextBoxId": {
            "type": "string",
            "description": "textBox id from inside destinationTag",
            "example": "1"
          },
          "edgeType": {
            "type": "string",
            "description": "The type of the relationship between the two objects. Can be extended to discrete histogram of types. All types must belong to taxonomy or the challenge must allow for open-taxonomy.",
            "example": "has-greater-area"
          },
          "slack": {
            "type": "number",
            "format": "double",
            "description": "How much the edge can allow for the nodes to move without changing its length?",
            "example": 0.0
          },
          "elasticity": {
            "type": "number",
            "format": "double",
            "example": 3.14,
            "description": "How much the edge can extended or contracted?"
          },
          "internalSubjectiveOpinion": {
            "$ref": "https://raw.githubusercontent.com/deepviss-org/deepVISS-COMMON/master/deep-viss-common.json#/components/schemas/InternalSubjectiveOpinion",
            "type": "InternalSubjectiveOpinion"
          }
        }
      },
      "GetTaskResponse": {
        "type": "object",
        "description": "response from get task",
        "properties": {
          "taskId": {
            "description": "Unique ID of task",
            "type": "string",
            "format": "uuid"
          },
          "taggedMediaItem": {
            "type": "TaggedMediaItem",
            "$ref": "#/components/schemas/TaggedMediaItem"
          }
        }
      },
      "Shred": {
        "type": "object",
        "description": "shred of a media item",
        "properties": {
          "shredId": {
            "description": "Unique ID of shred",
            "type": "string",
            "format": "uuid"
          },
          "coordinates": {
            "type": "TaggedMediaItem",
            "$ref": "#/components/schemas/BoundingRectangle"
          },
          "zoneNumber": {
            "description": "id of the static shred",
            "type": "integer",
            "example": 1
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about DeepVISS",
    "url": "https://deepviss.org"
  }
}